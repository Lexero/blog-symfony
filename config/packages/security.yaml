security:
    # https://symfony.com/doc/current/security.html#registering-the-user-hashing-passwords
    password_hashers:
        Symfony\Component\Security\Core\User\PasswordAuthenticatedUserInterface: bcrypt
    # https://symfony.com/doc/current/security.html#loading-the-user-the-user-provider

    role_hierarchy:
        !php/const App\Enum\UserRoleEnum::ROLE_WRITER: [!php/const App\Enum\UserRoleEnum::ROLE_READER, !php/const App\Enum\UserRoleEnum::ROLE_ADMIN]
        !php/const App\Enum\UserRoleEnum::ROLE_READER: [ !php/const App\Enum\UserRoleEnum::ROLE_USER ]
    providers:
        user:
            entity:
                class: App\Entity\User
                property: email
    firewalls:
        dev:
            pattern: ^/(_(profiler|wdt)|css|images|js)/
            security: false
        admin:
            pattern: ^/admin
            form_login:
                provider: user
                check_path: admin_login
                login_path: admin_login
                default_target_path: sonata_admin_dashboard
            logout:
                path: admin_logout
                target: admin_login
        main:
            lazy: false
            form_login:
                provider: user
                login_path: login
                check_path: login
                default_target_path: /blog
            logout:
                path: logout
                target: login
            user_checker: App\Security\VerificationUserChecker
#            custom_authenticator: App\Security\UserAuthenticator

    # Note: Only the *first* access control that matches will be used
    access_control:
        - { path: ^/_profiler, roles: PUBLIC_ACCESS }
        - { path: ^/login, roles: PUBLIC_ACCESS }
        - { path: ^/registration, roles: PUBLIC_ACCESS }
        - { path: ^/verify/email, roles: PUBLIC_ACCESS }
        - { path: ^/admin/login, roles: PUBLIC_ACCESS }
        - { path: ^/admin, roles: !php/const App\Enum\UserRoleEnum::ROLE_WRITER }
        - { path: ^/blog, roles: !php/const App\Enum\UserRoleEnum::ROLE_READER }
        - { path: ^/, roles: !php/const App\Enum\UserRoleEnum::ROLE_READER }

when@test:
    security:
        password_hashers:
            # By default, password hashers are resource intensive and take time. This is
            # important to generate secure password hashes. In tests however, secure hashes
            # are not important, waste resources and increase test times. The following
            # reduces the work factor to the lowest possible values.
            Symfony\Component\Security\Core\User\PasswordAuthenticatedUserInterface:
                algorithm: bcrypt
                cost: 4 # Lowest possible value for bcrypt
                time_cost: 3 # Lowest possible value for argon
                memory_cost: 10 # Lowest possible value for argon
